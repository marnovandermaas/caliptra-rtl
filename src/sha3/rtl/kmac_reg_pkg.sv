// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package kmac_reg_pkg;

  // Param list
  parameter int NumEntriesMsgFifo = 10;
  parameter int NumBytesMsgFifoEntry = 8;
  parameter int unsigned HashCntW = 10;
  parameter int NumSeedsEntropy = 6;
  parameter int NumAlerts = 2;

  // Address widths within the block
  parameter int BlockAw = 12;

  // Number of registers for every interface
  parameter int NumRegs = 9;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } kmac_err;
    struct packed {
      logic        q;
    } fifo_empty;
    struct packed {
      logic        q;
    } kmac_done;
  } kmac_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } kmac_err;
    struct packed {
      logic        q;
    } fifo_empty;
    struct packed {
      logic        q;
    } kmac_done;
  } kmac_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } kmac_err;
    struct packed {
      logic        q;
      logic        qe;
    } fifo_empty;
    struct packed {
      logic        q;
      logic        qe;
    } kmac_done;
  } kmac_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } fatal_fault_err;
    struct packed {
      logic        q;
      logic        qe;
    } recov_operation_err;
  } kmac_reg2hw_alert_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } en_unsupported_modestrength;
    struct packed {
      logic        q;
      logic        qe;
    } entropy_ready;
    struct packed {
      logic        q;
      logic        qe;
    } msg_mask;
    struct packed {
      logic        q;
      logic        qe;
    } entropy_fast_process;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } entropy_mode;
    struct packed {
      logic        q;
      logic        qe;
    } sideload;
    struct packed {
      logic        q;
      logic        qe;
    } state_endianness;
    struct packed {
      logic        q;
      logic        qe;
    } msg_endianness;
    struct packed {
      logic [1:0]  q;
      logic        qe;
    } mode;
    struct packed {
      logic [2:0]  q;
      logic        qe;
    } kstrength;
    struct packed {
      logic        q;
      logic        qe;
    } kmac_en;
  } kmac_reg2hw_cfg_shadowed_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } err_processed;
    struct packed {
      logic        q;
      logic        qe;
    } hash_cnt_clr;
    struct packed {
      logic        q;
      logic        qe;
    } entropy_req;
    struct packed {
      logic [5:0]  q;
      logic        qe;
    } cmd;
  } kmac_reg2hw_cmd_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } kmac_err;
    struct packed {
      logic        d;
      logic        de;
    } fifo_empty;
    struct packed {
      logic        d;
      logic        de;
    } kmac_done;
  } kmac_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic        d;
  } kmac_hw2reg_cfg_regwen_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } alert_recov_ctrl_update_err;
    struct packed {
      logic        d;
    } alert_fatal_fault;
    struct packed {
      logic        d;
    } fifo_full;
    struct packed {
      logic        d;
    } fifo_empty;
    struct packed {
      logic [4:0]  d;
    } fifo_depth;
    struct packed {
      logic        d;
    } sha3_squeeze;
    struct packed {
      logic        d;
    } sha3_absorb;
    struct packed {
      logic        d;
    } sha3_idle;
  } kmac_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } kmac_hw2reg_err_code_reg_t;

  // Register -> HW type
  typedef struct packed {
    kmac_reg2hw_intr_state_reg_t intr_state; // [54:52]
    kmac_reg2hw_intr_enable_reg_t intr_enable; // [51:49]
    kmac_reg2hw_intr_test_reg_t intr_test; // [48:43]
    kmac_reg2hw_alert_test_reg_t alert_test; // [42:39]
    kmac_reg2hw_cfg_shadowed_reg_t cfg_shadowed; // [38:13]
    kmac_reg2hw_cmd_reg_t cmd; // [12:0]
  } kmac_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    kmac_hw2reg_intr_state_reg_t intr_state; // [51:46]
    kmac_hw2reg_cfg_regwen_reg_t cfg_regwen; // [45:45]
    kmac_hw2reg_status_reg_t status; // [44:33]
    kmac_hw2reg_err_code_reg_t err_code; // [32:0]
  } kmac_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] KMAC_INTR_STATE_OFFSET = 12'h 0;
  parameter logic [BlockAw-1:0] KMAC_INTR_ENABLE_OFFSET = 12'h 4;
  parameter logic [BlockAw-1:0] KMAC_INTR_TEST_OFFSET = 12'h 8;
  parameter logic [BlockAw-1:0] KMAC_ALERT_TEST_OFFSET = 12'h c;
  parameter logic [BlockAw-1:0] KMAC_CFG_REGWEN_OFFSET = 12'h 10;
  parameter logic [BlockAw-1:0] KMAC_CFG_SHADOWED_OFFSET = 12'h 14;
  parameter logic [BlockAw-1:0] KMAC_CMD_OFFSET = 12'h 18;
  parameter logic [BlockAw-1:0] KMAC_STATUS_OFFSET = 12'h 1c;
  parameter logic [BlockAw-1:0] KMAC_ERR_CODE_OFFSET = 12'h 20;

  // Reset values for hwext registers and their fields
  parameter logic [2:0] KMAC_INTR_TEST_RESVAL = 3'h 0;
  parameter logic [0:0] KMAC_INTR_TEST_KMAC_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] KMAC_INTR_TEST_FIFO_EMPTY_RESVAL = 1'h 0;
  parameter logic [0:0] KMAC_INTR_TEST_KMAC_ERR_RESVAL = 1'h 0;
  parameter logic [1:0] KMAC_ALERT_TEST_RESVAL = 2'h 0;
  parameter logic [0:0] KMAC_ALERT_TEST_RECOV_OPERATION_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] KMAC_ALERT_TEST_FATAL_FAULT_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] KMAC_CFG_REGWEN_RESVAL = 1'h 1;
  parameter logic [0:0] KMAC_CFG_REGWEN_EN_RESVAL = 1'h 1;
  parameter logic [10:0] KMAC_CMD_RESVAL = 11'h 0;
  parameter logic [17:0] KMAC_STATUS_RESVAL = 18'h 4001;
  parameter logic [0:0] KMAC_STATUS_SHA3_IDLE_RESVAL = 1'h 1;
  parameter logic [0:0] KMAC_STATUS_FIFO_EMPTY_RESVAL = 1'h 1;
  parameter logic [0:0] KMAC_STATUS_ALERT_FATAL_FAULT_RESVAL = 1'h 0;
  parameter logic [0:0] KMAC_STATUS_ALERT_RECOV_CTRL_UPDATE_ERR_RESVAL = 1'h 0;

  // Window parameters
  parameter logic [BlockAw-1:0] KMAC_STATE_OFFSET = 12'h 200;
  parameter int unsigned        KMAC_STATE_SIZE   = 'h 200;
  parameter int unsigned        KMAC_STATE_IDX    = 0;
  parameter logic [BlockAw-1:0] KMAC_MSG_FIFO_OFFSET = 12'h 800;
  parameter int unsigned        KMAC_MSG_FIFO_SIZE   = 'h 800;
  parameter int unsigned        KMAC_MSG_FIFO_IDX    = 1;

  // Register index
  typedef enum int {
    KMAC_INTR_STATE,
    KMAC_INTR_ENABLE,
    KMAC_INTR_TEST,
    KMAC_ALERT_TEST,
    KMAC_CFG_REGWEN,
    KMAC_CFG_SHADOWED,
    KMAC_CMD,
    KMAC_STATUS,
    KMAC_ERR_CODE
  } kmac_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] KMAC_PERMIT [9] = '{
    4'b 0001, // index[0] KMAC_INTR_STATE
    4'b 0001, // index[1] KMAC_INTR_ENABLE
    4'b 0001, // index[2] KMAC_INTR_TEST
    4'b 0001, // index[3] KMAC_ALERT_TEST
    4'b 0001, // index[4] KMAC_CFG_REGWEN
    4'b 1111, // index[5] KMAC_CFG_SHADOWED
    4'b 0011, // index[6] KMAC_CMD
    4'b 0111, // index[7] KMAC_STATUS
    4'b 1111  // index[8] KMAC_ERR_CODE
  };

endpackage
